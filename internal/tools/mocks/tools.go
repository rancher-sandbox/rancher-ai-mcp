// Code generated by MockGen. DO NOT EDIT.
// Source: ../tools.go
//
// Generated by this command:
//
//	mockgen -source=../tools.go -destination=./tools.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	k8s "mcp/internal/tools/k8s"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	dynamic "k8s.io/client-go/dynamic"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockClientCreator is a mock of ClientCreator interface.
type MockClientCreator struct {
	ctrl     *gomock.Controller
	recorder *MockClientCreatorMockRecorder
	isgomock struct{}
}

// MockClientCreatorMockRecorder is the mock recorder for MockClientCreator.
type MockClientCreatorMockRecorder struct {
	mock *MockClientCreator
}

// NewMockClientCreator creates a new mock instance.
func NewMockClientCreator(ctrl *gomock.Controller) *MockClientCreator {
	mock := &MockClientCreator{ctrl: ctrl}
	mock.recorder = &MockClientCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientCreator) EXPECT() *MockClientCreatorMockRecorder {
	return m.recorder
}

// CreateClientSet mocks base method.
func (m *MockClientCreator) CreateClientSet(token, url string) (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientSet", token, url)
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientSet indicates an expected call of CreateClientSet.
func (mr *MockClientCreatorMockRecorder) CreateClientSet(token, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientSet", reflect.TypeOf((*MockClientCreator)(nil).CreateClientSet), token, url)
}

// GetResourceInterface mocks base method.
func (m *MockClientCreator) GetResourceInterface(token, url, namespace string, gvr schema.GroupVersionResource) (dynamic.ResourceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceInterface", token, url, namespace, gvr)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceInterface indicates an expected call of GetResourceInterface.
func (mr *MockClientCreatorMockRecorder) GetResourceInterface(token, url, namespace, gvr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceInterface", reflect.TypeOf((*MockClientCreator)(nil).GetResourceInterface), token, url, namespace, gvr)
}

// MockResourceFetcher is a mock of ResourceFetcher interface.
type MockResourceFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockResourceFetcherMockRecorder
	isgomock struct{}
}

// MockResourceFetcherMockRecorder is the mock recorder for MockResourceFetcher.
type MockResourceFetcherMockRecorder struct {
	mock *MockResourceFetcher
}

// NewMockResourceFetcher creates a new mock instance.
func NewMockResourceFetcher(ctrl *gomock.Controller) *MockResourceFetcher {
	mock := &MockResourceFetcher{ctrl: ctrl}
	mock.recorder = &MockResourceFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceFetcher) EXPECT() *MockResourceFetcherMockRecorder {
	return m.recorder
}

// FetchK8sResource mocks base method.
func (m *MockResourceFetcher) FetchK8sResource(params k8s.FetchParams) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchK8sResource", params)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchK8sResource indicates an expected call of FetchK8sResource.
func (mr *MockResourceFetcherMockRecorder) FetchK8sResource(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchK8sResource", reflect.TypeOf((*MockResourceFetcher)(nil).FetchK8sResource), params)
}

// FetchK8sResources mocks base method.
func (m *MockResourceFetcher) FetchK8sResources(params k8s.FetchParams) ([]*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchK8sResources", params)
	ret0, _ := ret[0].([]*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchK8sResources indicates an expected call of FetchK8sResources.
func (mr *MockResourceFetcherMockRecorder) FetchK8sResources(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchK8sResources", reflect.TypeOf((*MockResourceFetcher)(nil).FetchK8sResources), params)
}
